
server:
  port: 4004

#gateway
spring:
  # connect to Redis
  data:
    redis:
      host: ${REDIS_HOST:redis}
      port: ${REDIS_PORT:6379}
  cloud:
    gateway:
      server:
        webflux:
          routes:
            ### REST CLIENT -> http://localhost:4004/auth/login
            ### Gateway rewrite ->http://auth-service:4005/login
            - id: auth-service-route
              uri: http://auth-service:4005
              predicates:
                - Path=/auth/**
              filters:
                - StripPrefix=1
            ### REST-CLIENT -> http://localhost:4004/api-docs/auth
            ### API-GATEWAY -> http://auth-service:4005/v3/api-docs
            - id: api-docs-auth-route
              uri: http://auth-service:4005
              predicates:
                - Path=/api-docs/auth
              filters:
                - RewritePath=/api-docs/auth,/v3/api-docs
            ### REST CLIENT -> http://localhost:4004/api/patients
            ### Gateway rewrite ->http://patient-service:4000/patients
            - id: patient-service-route
              uri: http://patient-service:4000
              predicates:
                - Path=/api/patients/**
              filters:
                - StripPrefix=1
                - JwtValidation
            ### REST-CLIENT -> http://localhost:4004/api-docs/patients
            ### API-GATEWAY -> http://patients-service:4000/v3/api-docs
            - id: api-docs-patient-route
              uri: http://patient-service:4000
              predicates:
                - Path=/api-docs/patients
              filters:
                - RewritePath=/api-docs/patients,/v3/api-docs
          default-filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.burstCapacity: 5 #max 5token
                redis-rate-limiter.replenishRate: 5 #replenish 5token/s
                redis-rate-limiter.requestedToken: 1 #default value. 1request/1token
                key-resolver: "#{@ipKeyResolver}"


