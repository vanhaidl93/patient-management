services:
  api-gateway:
    image: 'api-service:v1'
    container_name: api-gateway
    ports:
      - '4004:4004'
    environment:
      AUTH_SERVICE_URL: 'http://auth-service:4005'
    extends:
      file: common-config.yml
      service: microservice-base-config

  auth-service:
    image: 'auth-service:v1'
    container_name: auth-service
    environment:
      JWT_SECRET: 'jTt8XbzMJvR8TUVvWikVkjpc4vQgyoDcvMNEPRi0TBY='
    depends_on:
      auth-service-db:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-base-config

  patient-service:
    image: 'patient-service:v1'
    container_name: patient-service
    environment:
      BILLING_SERVICE_ADDRESS: billing-service
      BILLING_SERVICE_GRPC_PORT: 9001
      SPRING_CACHE_TYPE: redis
      SPRING_DATA_REDIS_HOST: redis
      SPRING_DATA_REDIS_PORT: 6379
    depends_on:
      redis:
        condition: service_healthy
      patient-service-db:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-kafka-config

  appointment-service:
    image: "appointment-service:v1"
    container_name: appointment-service
    ports:
      - '4006:4006'
    depends_on:
      appointment-service-db:
        condition: service_healthy
    extends:
      file: common-config.yml
      service: microservice-kafka-config

  analytics-service:
    image: "analytics-service:v1"
    container_name: analytics-service
    extends:
      file: common-config.yml
      service: microservice-kafka-config

  billing-service:
    image: "billing-service:v1"
    container_name: billing-service
    extends:
      file: common-config.yml
      service: microservice-kafka-config

  patient-service-db:
    image: postgres:17
    container_name: patient-service-db
    ports:
      - '5000:5432'
    volumes:
      - './db_volumes/patient-service-db:/var/lib/postgresql/data'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_DB: db
      POSTGRES_PASSWORD: password
      POSTGRES_USER: admin_user
    extends:
      file: common-config.yml
      service: microservice-base-config

  auth-service-db:
    image: postgres:17
    container_name: auth-service-db
    ports:
      - '5001:5432'
    volumes:
      - './db_volumes/auth-service-db:/var/lib/postgresql/data'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_DB: db
      POSTGRES_PASSWORD: password
      POSTGRES_USER: admin_user
    extends:
      file: common-config.yml
      service: microservice-base-config

  appointment-service-db:
    image: postgres:17
    container_name: appointment-service-db
    ports:
      - '5002:5432'
    volumes:
      - './db_volumes/patient-service-db:/var/lib/postgresql/data'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    environment:
      POSTGRES_DB: db
      POSTGRES_PASSWORD: password
      POSTGRES_USER: admin_user
    extends:
      file: common-config.yml
      service: microservice-base-config

  redis:
    image: redis:8.2.2
    container_name: redis
    ports:
      - '6379:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s
    extends:
      file: common-config.yml
      service: microservice-base-config

  kafka:
    image: bitnamilegacy/kafka:latest
    container_name: kafka
    ports:
      - '9092:9092'
      - '9094:9094'
    healthcheck:
      test: [ "CMD", "bash", "-c", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list > /dev/null 2>&1" ]
      interval: 10s
      timeout: 10s
      retries: 10
      start_period: 30s
    environment:
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: @kafka:9093
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,EXTERNAL:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092,CONTROLLER://:9093,EXTERNAL://:9094
      KAFKA_CFG_NODE_ID: 0
      KAFKA_CFG_PROCESS_ROLES: controller,broker
    extends:
      file: common-config.yml
      service: microservice-base-config

  #grafana
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    extends:
      file: common-config.yml
      service: network-deploy-service

  # prometheus (metric)
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ../observability/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    extends:
      file: common-config.yml
      service: network-deploy-service

networks:
  internal:
    driver: "bridge"
